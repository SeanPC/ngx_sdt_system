#
user  webuser webuser;
worker_processes  1;

worker_rlimit_nofile 1024;

error_log  logs/error.log;
pid        logs/nginx.pid;


events {
    use epoll;
    worker_connections  1024;
}

http {

    include       mime.types;
    default_type  application/octet-stream;


    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "http_need_static_dt_version:$http_need_static_dt_version"';

    access_log  logs/access.log  main;


    sendfile on;
    tcp_nopush     on;
    tcp_nodelay on;


    keepalive_timeout 65s;
    client_header_timeout 15s;
    client_body_timeout 15s;
    proxy_connect_timeout 5s;

    proxy_next_upstream error timeout;
    proxy_next_upstream_tries 2;

    server_tokens off;
    proxy_intercept_errors on;
    client_header_buffer_size 16k;
    large_client_header_buffers 4 32k;
    client_body_buffer_size  128k;
    client_max_body_size 16m;

    gzip on;
    gzip_min_length  1k;
    gzip_buffers     16 8k;
    gzip_comp_level 7;
    gzip_types       text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript application/json application/javascript;
    gzip_vary on;


    include /opt/nginx/lua/cache_proxy/nginx_conf/http_block.conf;
    
    #缓存存放的位置，下面使用了/tmp 是测试使用，线上使用请使用情况硬盘目录
    proxy_cache_path /tmp/nginx levels=1:2 keys_zone=my_zone:10m inactive=1m;
    proxy_cache_key "$scheme$request_method$host$request_uri$http_need_static_dt_version";


    upstream nginx_servers {
        # nginx服务器， 它不是静态容灾的缓存代理的nginx，而是客户端直接访问的反向代理的nginx。
        server 127.0.0.1:80;
        keepalive 166;
    
    }

    server {
        listen 8000;
        location / {
            proxy_cache my_zone;
            proxy_set_header   Connection "";
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            # 每个时间版本的缓存有效期，请和 cache_proxy/config/config.lua 的cache_version_updatetime配置为一样的，方便缓存的版本计算和查找
            proxy_cache_valid 6h;
            #设置缓存的时间版本和命中缓存
            add_header X-Proxy-Cache "$http_need_static_dt_version-$upstream_cache_status";

            proxy_pass http://nginx_servers;
        }
        # 如果请求缓存异常，通过error_page 将请求生成的版本会被删除， 请确认这些http状态是否包含改业务所有的错误情况。
        error_page 400 401 403 404 405 500 502 503 504 505 520 @fallback;
        location  @fallback {
            rewrite_by_lua_file  /opt/nginx/lua/cache_proxy/lua_script/del_err_version.lua;
        } 
    }

}
