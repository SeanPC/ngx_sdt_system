#
user  webuser webuser;
worker_processes  1;

error_log  logs/error.log;
pid        logs/nginx.pid;

events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "http_need_static_dt_version:$http_need_static_dt_version"';

    access_log  logs/access.log  main;

    sendfile        on;
    tcp_nopush     on;

    keepalive_timeout  65;

    gzip  on;

    include /opt/nginx/lua/log_collection/nginx_conf/http_block.conf;
#    include /opt/nginx/lua/staic_dt/nginx_conf/http_block.conf;

    more_set_headers "Upstream-Name: $proxy_host";

    # 配置静态容灾的缓存系统
    upstream dt_cache_server {
        server 127.0.0.1:8000;
        keepalive 60;
    }
    server {

        listen   80;
        server_name test1.ngx_lua.com test2.ngx_lua.com test3.ngx_lua.com;

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header   Connection "";
            proxy_http_version 1.1;

          
            #静态容灾的缓存系统，一般情况下是一个反向代理nginx，也就是包含cache_proxy启动的nginx
            location = /ups_static_dt {
                proxy_pass http://dt_cache_server$request_uri;
            }

            location / {
                proxy_pass http://127.0.0.1:811/;
             }
    }

    server {

        listen   811;

        location /  {
             log_by_lua_block {
             }
             rewrite_by_lua_block {
                return ngx.exit(ngx.OK)
             }

             content_by_lua_block {
                 ngx.sleep(0.01);
                 if ngx.var.uri == '/b/123' then
                     ngx.sleep(0.02);
                 end
                 ngx.say("访问正常: ", ngx.var.host .. ngx.var.uri)

             }
        }

    }

}
